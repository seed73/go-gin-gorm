// controllers/books.go

package controllers

import (
	"bookCRUD/models"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"

	_ "bookCRUD/docs" // docs is generated by Swag CLI, you have to import it.
)

type CreateTaskInput struct {
	AssingedTo string `json:"assignedTo" example:"20210101"`
	Task       string `json:"task" example:"할일"`
	Deadline   string `json:"deadline" example:"2021-01-01"`
}

type UpdateTaskInput struct {
	AssingedTo string `json:"assignedTo" example:"20210101"`
	Task       string `json:"task" example:"할일"`
	Deadline   string `json:"deadline" example:"2021-01-01"`
}

/* 아래 항목이 swagger에 의해 문서화 된다. */
// FindTasks godoc
// @Summary Task List 조회
// @Description 상세한 설명 기재
// @name FindTasks
// @Accept json
// @Produce json
// @Router /tasks [get]
// @Success 200 {object} models.Task
// @Failure 400
func FindTasks(c *gin.Context) {
	db := c.MustGet("db").(*gorm.DB)
	var tasks []models.Task
	db.Find(&tasks)

	c.JSON(http.StatusOK, gin.H{"data": tasks})
}

// POST /tasks
// Create new task
// CreateTask godoc
// @Summary Task 생성
// @Description 상세한 설명 기재
// @name FindTasks
// @Accept json
// @Produce json
// @Router /tasks [post]
// @Param data body CreateTaskInput true "파라미터 설명"
// @Success 200 {object} models.Task
func CreateTask(c *gin.Context) {
	// Validate input
	var input CreateTaskInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	date := "2006-01-02"
	deadline, _ := time.Parse(date, input.Deadline)

	// Create task
	task := models.Task{AssingedTo: input.AssingedTo, Task: input.Task, Deadline: deadline}

	db := c.MustGet("db").(*gorm.DB)
	db.Create(&task)

	c.JSON(http.StatusOK, gin.H{"data": task})
}

// GET /tasks/:id
// Find a task
// @Summary Task 단건조회
// @Description 상세한 설명 기재
// @name FindTask
// @Accept json
// @Produce json
// @Router /tasks/{id} [get]
// @Param id path string true "파라미터 설명"
// @Success 200 {object} models.Task
func FindTask(c *gin.Context) { // Get model if exist
	var task models.Task

	db := c.MustGet("db").(*gorm.DB)
	if err := db.Where("id = ?", c.Param("id")).First(&task).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Record not found!"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": task})
}

// PATCH /tasks/:id
// Update a task
// @Summary Task 수정
// @Description 상세한 설명 기재
// @name UpdateTask
// @Accept json
// @Produce json
// @Router /tasks/{id} [patch]
// @Param id path string true "파라미터 설명"
// @Param data body UpdateTaskInput true "파라미터 설명"
// @Success 200 {object} models.Task
func UpdateTask(c *gin.Context) {

	db := c.MustGet("db").(*gorm.DB)
	// Get model if exist
	var task models.Task
	if err := db.Where("id = ?", c.Param("id")).First(&task).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Record not found!"})
		return
	}

	// Validate input
	var input UpdateTaskInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	date := "20060102"
	deadline, _ := time.Parse(date, input.Deadline)

	var updatedInput models.Task
	updatedInput.Deadline = deadline
	updatedInput.AssingedTo = input.AssingedTo
	updatedInput.Task = input.Task

	db.Model(&task).Updates(updatedInput)

	c.JSON(http.StatusOK, gin.H{"data": task})
}

// DELETE /tasks/:id
// Delete a task
// @Summary Task 삭제
// @Description 상세한 설명 기재
// @name DeleteTask
// @Accept json
// @Produce json
// @Router /tasks/{id} [delete]
// @Param id path string true "파라미터 설명"
func DeleteTask(c *gin.Context) {
	// Get model if exist
	db := c.MustGet("db").(*gorm.DB)
	var book models.Task
	if err := db.Where("id = ?", c.Param("id")).First(&book).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Record not found!"})
		return
	}

	db.Delete(&book)

	c.JSON(http.StatusOK, gin.H{"data": true})
}
